/* Symwaf2icProject File */
/* vim: set expandtab ts=4 sw=4 ft=groovy foldmethod=marker foldmarker={,}: */
// :setlocal fillchars=fold:\  foldtext=getline(v:foldstart)

startup()   // list basic information about the project being created
//help()    // list available environment

/**
* Symwaf2ic Project Definition - README.
*
* Note that this boils down to groovy code. More information can be found in
* the files Symwaf2icProject, Symwaf2icJob and Symwaf2icGenerator - ordered by
* importance to the project-definition scripter.
*
* External Documentation: Jenkins JobDSL Plugin
* 
* Note that provided shell scipts in this file must follow some groovy escaping
* rules: ${BASH_VARIABLE} must be written as \${BASH...; if you write
* ${GROOVY_VAR} it expands to during the dsl/groovy processing already.
* startup() lists some of the available groovy variables. A complete list is
* shown by help(). If you want your bash to emit a newline you must write
* '\\n'.
*/

software_buildshell = """\
#UGLY!
. /afs/kip.uni-heidelberg.de/projects/vision/definst_software/shrc
module load mongo

./waf configure --test-timeout=360 --test-xml-summary=test_results
./waf install --test-execnone
./bin/tests/sthal-tests --gtest_filter='-HMFConfig.*:*HWTest' --gtest_output=xml:build/test_results/test-sthal-main.xml || true
"""

poly_buildshell="""\
./waf configure
./waf install
"""

// *** sthal@dev_polymorphic_handle ***

sw = SoftwareJob([
    // basic job
    //debug           : true,     // if true, the jobname is postfixed with '-dsldbg' and the job is disabled
    enabled         : true,     // if the job should be enabled (will be overridden if debug is true)
    space           : 10,       // number of GiBs that must be free on the node for the job to perform, false=no space check
    description     : true,     // true=default, false=no descr., text= user defined description
    
    // trigger
    scripttrigger_schedule  : true, // true=default, false=off, string=userdefined
    crontrigger_schedule    : true, // as above
    
    // project setup
    cleanonce       : true,     // if the workspace should be cleaned after each recreation.. TODO; this should be a must?! But what about cleaning due to symwaf2ic updates?
    distclean       : false,    // perform "waf distclean" prior each job execution
    //buildshell      : software_buildshell, // defaults to "waf configure, build and install)    

    blamemail       : true,     // if the job should send mails to vandals, will be overridden to false if debug is true
    
    test_publisher  : true,     // build/test_result/test-*.xml
    distribution    : true,     // create artifacts for lib and bin folder
    
    queue           : false,    // if the job should be queued after the generator
])


//  doc = DocumentationJob(
//      htmldir     : "build/sthal/doc/html",
//  )


//  // a specific/personal/test-job
//  mine = PrivateJob("khs",
//      debug : true,    // passed on to the Symwaf2icJob constructor.
//      space : false,   // do not check for node space
//      description : "Generated Symwaf2ic Example Job. Generator: ${GENERATOR}."
//  )
//  
//  mine.with { // can call methods from Symwaf2icJob and Jenkins JobDSL.
//      symwaf2icTrigger()
//      symwaf2icProject("sthal", cleanonce: false)
//      steps {
//          shell(software_buildshell)
//          shell("./waf doc") // will follow the above shell
//      }
//      publishers {
//          publishHtml {
//              report("build/sthal/doc/html", "Sthal Documentation (test)") //, reportFiles, keepAll)
//          }
//          archiveJunit("build/test_results/test-*.xml", false) //, allowClaimingOfFailedTests, publishTestAttachments)
//      }
//  }


return "Any message you like..."
