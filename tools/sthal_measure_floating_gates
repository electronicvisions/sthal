#!/bin/env python
# -*- coding: utf8 -*-
# pylint: disable=missing-docstring

import os
import numpy
import cPickle

import Coordinate
import pysthal
import pyhalbe
import pylogging

loggername = __name__.replace('_', '')
logger = pylogging.get(loggername)

def run(wafer, hicann, block, rows):
    cfg = pysthal.ProgrammAndReadFloatingGatesConfigurator()
    for row in rows:
        cfg.meassure(block, row)
    wafer.connect(pysthal.MagicHardwareDatabase())
    wafer.configure(cfg)
    wafer.disconnect()

    data = {'floating_gates' : hicann.floating_gates}
    for row in rows:
        measurment = cfg.getMeasurment(block, row)
        data[(block, row)] = numpy.array(
            [(r.means, r.variances) for r in measurment.results])
    return data

def plot(results, folder):
    import matplotlib as mpl
    mpl.use('Agg')
    import matplotlib.pyplot as plt

    from Coordinate import FGCellOnFGBlock, X, Y

    fgs = results.pop('floating_gates')
    for (block, row), result in results.iteritems():
        try:
            shared_parameter = pyhalbe.HICANN.getSharedParameter(block, row)
            shared_name = shared_parameter.name
        except IndexError:
            shared_name = "n.c."

        try:
            neuron_parameter = pyhalbe.HICANN.getNeuronParameter(block, row)
            neuron_name = neuron_parameter.name
        except IndexError:
            neuron_name = "n.c."

        title = "Block {},{} Row {} | {}, {}".format(
            int(block.x()), int(block.y()), int(row),
            shared_name, neuron_name)
        filename = "block_{}_row_{}.png".format(int(block.toEnum()), int(row))
        logger.info("Create plot '{}' in '{}'".format(title, filename))

        blk = fgs.getBlock(block)
        target_values = numpy.array(
            [blk.getRaw(FGCellOnFGBlock(X(ii), row)) for ii in range(129)],
            dtype=numpy.float)
        target_values *= 1.8/1023

        plt.subplot(1, 2, 1)
        plt.plot(target_values, 'x', color='k')
        for ii, step in enumerate(result):
            mean, variance = step
            plt.plot(mean, '.', label="{}".format(ii+1))
        plt.title(title)
        plt.legend(
            loc='upper center',
#            bbox_to_anchor=(0.0, 1.1),
#            bbox_transform=plt.gcf().transFigure,
            ncol=8)
        plt.xlim(-1, 129)
        plt.ylim(-0.05, 1.805)
        plt.axhline(0.0, linestyle='--', color='grey')
        plt.axhline(1.8, linestyle='--', color='grey')
#        plt.savefig(os.path.join(folder, filename))

        plt.subplot(1, 2, 2)
        # 5 mV bins
#        filename = "diff_block_{}_row_{}.png".format(int(block.toEnum()), int(row))
        bins = numpy.arange(50) * 0.0025
        for ii, step in enumerate(result):
            mean, variance = step
            plt.hist(numpy.abs(target_values - mean),
                     bins=bins, alpha=0.7, label="{}".format(ii+1))
        plt.title(title)
        plt.legend(
            loc='upper center',
#            bbox_to_anchor=(0.0, 1.1),
#            bbox_transform=plt.gcf().transFigure,
            ncol=8)
        plt.savefig(os.path.join(folder, filename))

        plt.close('all')


def add_options(parser):
    from measure_floating_gates_common import FGRowAction
    from pysthal.command_line_util import folder

    group = parser.add_argument_group("Select rows and block to meassures:")
    group.add_argument(
        '--block', action='store',
        type=lambda x: Coordinate.FGBlockOnHICANN(Coordinate.Enum(int(x))),
        help='specify floating gate block')
    group.add_argument(
        '--rows', action=FGRowAction,
        dest='rows', help='specify Row on fg block')
    group.add_argument(
        '--save', action='store', type=argparse.FileType('w'),
        help="Pickle results to file")
    group.add_argument(
        '--load-sthal', dest='sthal', action='store',
        type=argparse.FileType('r'),
        help="Load sthal Wafer container from pickle file")
    group.add_argument(
        '--load', action='store', type=argparse.FileType('r'),
        help="Don't meassure, but load results from file")
    group.add_argument(
        '--plot', action='store',
        type=folder,
        help="Plot results immediately using matplotlib")

def main():
    import argparse
    from pysthal.command_line_util import add_default_coordinate_options
    from pysthal.command_line_util import add_logger_options
    from pysthal.command_line_util import init_logger

    init_logger('WARN', [
        (loggername, 'INFO'),
        ('RecordJob', 'INFO'),
        ('RecordTraces', 'INFO'),
        ('sthal', 'INFO'),
        ('sthal.ProgrammAndReadFloatingGatesConfigurator', 'DEBUG'),
        ('sthal.AnalogRecorder', 'WARN'),
        ('halbe.fgwriter', 'ERROR')])

    parser = argparse.ArgumentParser(
        description='Floating Gate Measurment Tool')
    add_default_coordinate_options(parser)
    add_logger_options(parser)
    add_options(parser)
    args, _ = parser.parse_known_args()

    if args.load:
        result = cPickle.load(args.load)
    else:
        if not args.rows:
            print "No rows given to measure"
            parser.print_help()
            exit(1)
        if args.sthal:
            sthal = cPickle.load(args.sthal)
            wafer = sthal.wafer
            hicann = sthal.hicann
        else:
            wafer = pysthal.Wafer(args.wafer)
            hicann = wafer[args.hicann]
        result = run(wafer, hicann, args.block, args.rows)
    if args.save:
        cPickle.dump(result, args.save, cPickle.HIGHEST_PROTOCOL)

    if args.plot:
        plot(result, args.plot)

if __name__ == '__main__':
    main()

